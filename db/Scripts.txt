/*PROCEDIMIENTO ALMACENADO QUE REALIZA LA ACTUALIZACION DEL INVENTARIO DE LA AREPA
RESTANDO LA CANTIDAD QUE SE VA A VENDER*/
create or replace PROCEDURE SP_actualizarInventario_Arepa(pCantidad number,pArepa_id number)
IS
iCantidad number;
nCantidad number;
BEGIN
    SELECT stock INTO iCantidad FROM inventario_arepa WHERE arepa_id = pArepa_id;
    nCantidad := iCantidad - pCantidad;
    UPDATE inventario_arepa SET stock = nCantidad WHERE arepa_id = pArepa_id;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('El SQLCODE ES: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION ES: ' || SQLERRM);
END;

/

/*FUNCION ALMACENADA QUE VALIDA SI EL STOCK ES SUFICIENTE PARA REALIZAR LA VENTA
DE LA AREPA INDICADA*/
create or replace FUNCTION FN_validarStock_Arepa(pArepa_id number, pCantidad number)
return boolean
IS
cantidad number;
BEGIN
    SELECT stock INTO cantidad FROM inventario_arepa WHERE arepa_id = pArepa_id;
    if(cantidad >= pCantidad) then
      return true;
    else
      return false;
    end if;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('El SQLCODE ES: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION ES: ' || SQLERRM);
END;

/

/*TRIGGER QUE SE ENCARGA DE GESTIONAR EL STOCK DE LAS AREPAS PARA LA VENTA,
VALIDA PRIMERO SI LA CANTIDAD PEDIDA SE ENCUENTRA DISPONIBLE EN INVENTARIO,
SI ESTA DISPONIBLE ACTUALIZA EL INVENTARIO DE LA AREPA Y REALIZA LA VENTA*/
create or replace TRIGGER TRG_GestionarStock_Arepa
BEFORE INSERT OR UPDATE
ON detalle_factura
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
validar boolean;
no_stock EXCEPTION;
cantidad_invalida EXCEPTION;
cantidad_igual EXCEPTION;
  BEGIN
  if :new.cantidad <= 0 then
    RAISE cantidad_invalida;
  elsif :new.cantidad = :old.cantidad then
    RAISE cantidad_igual;
  else
    validar := FN_validarStock_Arepa(:new.arepa_id,:new.cantidad);
        if validar = true then
          if inserting then
            insert into detalle_factura values (:new.detalle_factura_id,:new.factura_id,:new.arepa_id,:new.cantidad);
            SP_actualizarInventario_Arepa(:new.cantidad,:new.arepa_id);
          elsif updating then
            UPDATE detalle_factura SET cantidad = :new.cantidad WHERE detalle_factura_id = :OLD.detalle_factura_id;
            SP_actualizarInventario_Arepa(:new.cantidad,:new.arepa_id);
          end if;
        else
          RAISE no_stock;
        end if;
  end if;
  EXCEPTION
      WHEN no_stock THEN
        DBMS_OUTPUT.PUT_LINE('No tiene stock disponible ');
      WHEN cantidad_invalida THEN
        DBMS_OUTPUT.PUT_LINE('La cantidad que ingreso no es valida ');
      WHEN cantidad_igual THEN
        DBMS_OUTPUT.PUT_LINE('La cantidad que ingreso es la misma que tenia');
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('El SQLCODE ES: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION ES: ' || SQLERRM);
END;


/


/*TRIGGER QUE SE EJECUTA DESPUES DE LA ACTUALIZACION DEL ESTADO DE LA AREPA
A DESACTIVADO, ELIMINA AUTOMATICAMENTE LAS RECETAS QUE ESTEN RELACIONADAS A ESA
AREPA*/
create or replace TRIGGER TRG_eliminarReceta_Arepa
AFTER UPDATE
ON arepa
FOR EACH ROW
DECLARE
  BEGIN
      if updating then
        if (:NEW.estado = 'N') then
          DELETE FROM RECETA_AREPA where arepa_id = :old.arepa_id;
        end if;
      end if;
  END;
  
/

/*TRIGGER QUE SE EJECUTA DESPUES DE LA ACTUALIZACION DEL ESTADO DEL INSUMO
A DESACTIVADO, ELIMINA AUTOMATICAMENTE LAS RECETAS QUE ESTEN RELACIONADAS A ES 
INSUMO*/
create or replace TRIGGER TRG_eliminarReceta_Insumo
AFTER UPDATE
ON insumo
FOR EACH ROW
DECLARE
  BEGIN
      if updating then
        if (:NEW.estado = 'N') then
          DELETE FROM RECETA_AREPA where insumo_id = :old.insumo_id;
        end if;
      end if;
  END;
  
/
  
  
  /*PROCEDIMIENTO ALMACENADO QUE REALIZA LA ACTUALIZACION DEL INVENTARIO DEL INSUMO
RESTANDO LA CANTIDAD TOTAL
NCANTIDAD = STOCK (INVENTARIO DE INSUMO) - (PCANTIDAD (CANTIDAD DE AREPAS QUE SE VAN A COMPRAR) *
R_INSUMO.CANTIDAD (CANTIDAD DE INSUMO NECESARIA PARA CREAR LA AREPA) )*/
create or replace PROCEDURE SP_actualizarInventario_insumo(pCantidad number,pArepa_id number)
IS
stock number;
nCantidad number;
CURSOR c_insumoAct IS
SELECT insumo_id,cantidad FROM receta_arepa WHERE arepa_id = pArepa_id;
BEGIN
    for r_insumo IN c_insumoAct  LOOP
      SELECT stock INTO stock FROM inventario_insumo WHERE insumo_id = r_insumo.insumo_id;
      nCantidad := stock - (pCantidad * r_insumo.cantidad);
      UPDATE inventario_insumo SET stock = nCantidad WHERE insumo_id = r_insumo.insumo_id;
    end loop;
      EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('El SQLCODE ES: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION ES: ' || SQLERRM);
END;

/

/*FUNCION ALMACENADA QUE VALIDA SI EL STOCK EN EL INSUMO ES SUFICIENTE PARA REALIZAR
LA CANTIDAD DE AREPAS QUE SE VAN A VENDER*/
create or replace FUNCTION FN_validarStock_insumo(pArepa_id number,pCantidad number)
return boolean
IS
rCantidad number;
stock number;
CURSOR c_insumo IS
SELECT insumo_id,cantidad FROM receta_arepa WHERE arepa_id = pArepa_id;
BEGIN
    for r_insumo IN c_insumo  LOOP
      SELECT stock INTO stock FROM inventario_insumo WHERE insumo_id = r_insumo.insumo_id;
      rCantidad := pCantidad * r_insumo.cantidad;
      if(stock >= rCantidad) then
        return true;
      else
        return false;
      end if;
    end loop;
      EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('El SQLCODE ES: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION ES: ' || SQLERRM);
END;

/

/*TRIGGER QUE SE ENCARGA DE GESTIONAR EL STOCK DE LAS AREPAS PARA LA VENTA,
VALIDA PRIMERO SI LA CANTIDAD PEDIDA SE ENCUENTRA DISPONIBLE EN INVENTARIO,
SI ESTA DISPONIBLE ACTUALIZA EL INVENTARIO DE LA AREPA Y REALIZA LA VENTA*/
create or replace TRIGGER TRG_GestionarStock_insumo
BEFORE INSERT OR UPDATE
ON detalle_factura
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
validar boolean;
no_stock EXCEPTION;
cantidad_invalida EXCEPTION;
cantidad_igual EXCEPTION;
  BEGIN
  if :new.cantidad <= 0 then
    RAISE cantidad_invalida;
  elsif :new.cantidad = :old.cantidad then
    RAISE cantidad_igual;
  else
    validar := FN_validarStock_insumo(:new.arepa_id,:new.cantidad);
        if validar = true then
          if inserting then
            insert into detalle_factura values (:new.detalle_factura_id,:new.factura_id,:new.arepa_id,:new.cantidad);
            SP_actualizarInventario_insumo(:new.cantidad,:new.arepa_id);
          elsif updating then
            UPDATE detalle_factura SET cantidad = :new.cantidad WHERE detalle_factura_id = :OLD.detalle_factura_id;
            SP_actualizarInventario_insumo(:new.cantidad,:new.arepa_id);
          end if;
        else
          RAISE no_stock;
        end if;
  end if;
  EXCEPTION
      WHEN no_stock THEN
        DBMS_OUTPUT.PUT_LINE('No tiene stock disponible ');
      WHEN cantidad_invalida THEN
        DBMS_OUTPUT.PUT_LINE('La cantidad que ingreso no es valida ');
      WHEN cantidad_igual THEN
        DBMS_OUTPUT.PUT_LINE('La cantidad que ingreso es la misma que tenia');
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('El SQLCODE ES: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION ES: ' || SQLERRM);
END;